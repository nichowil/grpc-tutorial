// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: transform/transform.proto

package transform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransformClient is the client API for Transform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformClient interface {
	// Transforms image
	Transform(ctx context.Context, opts ...grpc.CallOption) (Transform_TransformClient, error)
	SimulateError(ctx context.Context, in *ErrorHandlingRequest, opts ...grpc.CallOption) (*ErrorHandlingResponse, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type transformClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformClient(cc grpc.ClientConnInterface) TransformClient {
	return &transformClient{cc}
}

func (c *transformClient) Transform(ctx context.Context, opts ...grpc.CallOption) (Transform_TransformClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transform_ServiceDesc.Streams[0], "/transform.Transform/Transform", opts...)
	if err != nil {
		return nil, err
	}
	x := &transformTransformClient{stream}
	return x, nil
}

type Transform_TransformClient interface {
	Send(*Pixel) error
	Recv() (*Pixel, error)
	grpc.ClientStream
}

type transformTransformClient struct {
	grpc.ClientStream
}

func (x *transformTransformClient) Send(m *Pixel) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transformTransformClient) Recv() (*Pixel, error) {
	m := new(Pixel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transformClient) SimulateError(ctx context.Context, in *ErrorHandlingRequest, opts ...grpc.CallOption) (*ErrorHandlingResponse, error) {
	out := new(ErrorHandlingResponse)
	err := c.cc.Invoke(ctx, "/transform.Transform/SimulateError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/transform.Transform/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformServer is the server API for Transform service.
// All implementations must embed UnimplementedTransformServer
// for forward compatibility
type TransformServer interface {
	// Transforms image
	Transform(Transform_TransformServer) error
	SimulateError(context.Context, *ErrorHandlingRequest) (*ErrorHandlingResponse, error)
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedTransformServer()
}

// UnimplementedTransformServer must be embedded to have forward compatible implementations.
type UnimplementedTransformServer struct {
}

func (UnimplementedTransformServer) Transform(Transform_TransformServer) error {
	return status.Errorf(codes.Unimplemented, "method Transform not implemented")
}
func (UnimplementedTransformServer) SimulateError(context.Context, *ErrorHandlingRequest) (*ErrorHandlingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateError not implemented")
}
func (UnimplementedTransformServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedTransformServer) mustEmbedUnimplementedTransformServer() {}

// UnsafeTransformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformServer will
// result in compilation errors.
type UnsafeTransformServer interface {
	mustEmbedUnimplementedTransformServer()
}

func RegisterTransformServer(s grpc.ServiceRegistrar, srv TransformServer) {
	s.RegisterService(&Transform_ServiceDesc, srv)
}

func _Transform_Transform_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransformServer).Transform(&transformTransformServer{stream})
}

type Transform_TransformServer interface {
	Send(*Pixel) error
	Recv() (*Pixel, error)
	grpc.ServerStream
}

type transformTransformServer struct {
	grpc.ServerStream
}

func (x *transformTransformServer) Send(m *Pixel) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transformTransformServer) Recv() (*Pixel, error) {
	m := new(Pixel)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transform_SimulateError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorHandlingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServer).SimulateError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transform.Transform/SimulateError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServer).SimulateError(ctx, req.(*ErrorHandlingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transform_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transform.Transform/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transform_ServiceDesc is the grpc.ServiceDesc for Transform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transform.Transform",
	HandlerType: (*TransformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimulateError",
			Handler:    _Transform_SimulateError_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Transform_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transform",
			Handler:       _Transform_Transform_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transform/transform.proto",
}
